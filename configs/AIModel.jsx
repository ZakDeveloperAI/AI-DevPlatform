const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
});

const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
};

const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
};


export const chatSession = model.startChat({
    generationConfig,
    history: [
    ],
});

export const GenAiCode = model.startChat({
    generationConfig: CodeGenerationConfig,
    history: [
        {
            role: "user",
            parts: [
                { text: " Generate to do app:Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   " },
            ],
        },
        {
            role: "model",
            parts: [
                { text: "```json\n{\n  \"projectTitle\": \"Beautiful To-Do App\",\n  \"explanation\": \"This React-based To-Do app is designed for seamless task management with a visually appealing interface using Tailwind CSS. It includes components for task creation, listing, editing, and deletion, all organized into separate files. The app utilizes local storage for persistent data storage, ensuring user data is retained across sessions. Lucide React icons are used for enhanced user interaction, and the design prioritizes a clean and intuitive experience.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TaskList from './components/TaskList';\\nimport TaskForm from './components/TaskForm';\\nimport { Trash } from 'lucide-react';\\n\\nfunction App() {\\n  const [tasks, setTasks] = useState(() => {\\n    const storedTasks = localStorage.getItem('tasks');\\n    return storedTasks ? JSON.parse(storedTasks) : [];\\n  });\\n  const [filter, setFilter] = useState('all');\\n  const [darkMode, setDarkMode] = useState(false);\\n\\n  useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (newTask) => {\\n    setTasks([...tasks, newTask]);\\n  };\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter((task) => task.id !== id));\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTasks(\\n      tasks.map((task) =>\\n        task.id === id ? { ...task, completed: !task.completed } : task\\n      )\\n    );\\n  };\\n\\n  const editTask = (id, newText) => {\\n    setTasks(\\n      tasks.map((task) =>\\n        task.id === id ? { ...task, text: newText } : task\\n      )\\n    );\\n  };\\n\\n  const clearCompletedTasks = () => {\\n    setTasks(tasks.filter((task) => !task.completed));\\n  };\\n\\n  const filteredTasks = tasks.filter((task) => {\\n    if (filter === 'completed') {\\n      return task.completed;\\n    } else if (filter === 'active') {\\n      return !task.completed;\\n    }\\n    return true;\\n  });\\n\\n  return (\\n    <div className={`min-h-screen py-6 font-sans antialiased ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-100 text-gray-900'}`}>\\n      <div className=\\\"max-w-2xl mx-auto p-4 bg-white shadow-md rounded-md\\\">\\n        <div className=\\\"flex justify-between items-center mb-4\\\">\\n          <h1 className=\\\"text-2xl font-bold\\\">My To-Do List üìù</h1>\\n          <button\\n            onClick={() => setDarkMode(!darkMode)}\\n            className=\\\"px-4 py-2 rounded-md bg-gray-200 hover:bg-gray-300 focus:outline-none\\\"\\n          >\\n            {darkMode ? 'Light Mode ‚òÄÔ∏è' : 'Dark Mode üåô'}\\n          </button>\\n        </div>\\n\\n        <TaskForm addTask={addTask} />\\n\\n        <div className=\\\"flex space-x-4 mb-4\\\">\\n          <button onClick={() => setFilter('all')} className={`px-4 py-2 rounded-md ${filter === 'all' ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-gray-300'}`}>All</button>\\n          <button onClick={() => setFilter('active')} className={`px-4 py-2 rounded-md ${filter === 'active' ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-gray-300'}`}>Active</button>\\n          <button onClick={() => setFilter('completed')} className={`px-4 py-2 rounded-md ${filter === 'completed' ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-gray-300'}`}>Completed</button>\\n        </div>\\n\\n        <TaskList\\n          tasks={filteredTasks}\\n          deleteTask={deleteTask}\\n          toggleComplete={toggleComplete}\\n          editTask={editTask}\\n        />\\n\\n        {tasks.filter(task => task.completed).length > 0 && (\\n          <button\\n            onClick={clearCompletedTasks}\\n            className=\\\"flex items-center px-4 py-2 mt-4 rounded-md bg-red-500 text-white hover:bg-red-600 focus:outline-none\\\"\\n          >\\n            <Trash className=\\\"mr-2\\\" size={16} /> Clear Completed\\n          </button>\\n        )}\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\n      \"explanation\": null\n    },\n    \"/components/TaskForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nfunction TaskForm({ addTask }) {\\n  const [text, setText] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (text.trim() !== '') {\\n      addTask({ id: Date.now(), text: text, completed: false });\\n      setText('');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"mb-4\\\">\\n      <div className=\\\"flex\\\">\\n        <input\\n          type=\\\"text\\\"\\n          value={text}\\n          onChange={(e) => setText(e.target.value)}\\n          placeholder=\\\"Add a new task...\\\"\\n          className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n        />\\n        <button\\n          type=\\\"submit\\\"\\n          className=\\\"ml-2 px-4 py-2 rounded-md bg-blue-500 text-white hover:bg-blue-600 focus:outline-none\\\"\\n        >\\n          <Plus className=\\\"mr-2\\\" size={16} /> Add\\n        </button>\\n      </div>\\n    </form>\\n  );\\n}\\n\\nexport default TaskForm;\\n\",\n      \"explanation\": null\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React from 'react';\\nimport TaskItem from './TaskItem';\\n\\nfunction TaskList({ tasks, deleteTask, toggleComplete, editTask }) {\\n  return (\\n    <ul>\\n      {tasks.map((task) => (\\n        <TaskItem\\n          key={task.id}\\n          task={task}\\n          deleteTask={deleteTask}\\n          toggleComplete={toggleComplete}\\n          editTask={editTask}\\n        />\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nexport default TaskList;\\n\",\n      \"explanation\": null\n    },\n    \"/components/TaskItem.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Trash, Edit, Check } from 'lucide-react';\\n\\nfunction TaskItem({ task, deleteTask, toggleComplete, editTask }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editText, setEditText] = useState(task.text);\\n\\n  const handleEdit = () => {\\n    editTask(task.id, editText);\\n    setIsEditing(false);\\n  };\\n\\n  return (\\n    <li className=\\\"flex justify-between items-center py-2 border-b border-gray-200\\\">\\n      {isEditing ? (\\n        <input\\n          type=\\\"text\\\"\\n          value={editText}\\n          onChange={(e) => setEditText(e.target.value)}\\n          onBlur={handleEdit}\\n          onKeyDown={(e) => {\\n            if (e.key === 'Enter') {\\n              handleEdit();\\n            }\\n          }}\\n          className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n        />\\n      ) : (\\n        <span\\n          className={`cursor-pointer ${task.completed ? 'line-through text-gray-500' : ''}`}\\n          onClick={() => toggleComplete(task.id)}\\n        >\\n          {task.text}\\n        </span>\\n      )}\\n\\n      <div>\\n        <button\\n          onClick={() => setIsEditing(true)}\\n          className=\\\"px-2 py-1 rounded-md bg-yellow-500 text-white hover:bg-yellow-600 focus:outline-none mr-2\\\"\\n        >\\n          <Edit className=\\\"\\\" size={16} />\\n        </button>\\n        <button\\n          onClick={() => deleteTask(task.id)}\\n          className=\\\"px-2 py-1 rounded-md bg-red-500 text-white hover:bg-red-600 focus:outline-none\\\"\\n        >\\n          <Trash className=\\\"\\\" size={16} />\\n        </button>\\n      </div>\\n    </li>\\n  );\\n}\\n\\nexport default TaskItem;\\n\",\n      \"explanation\": null\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TaskForm.js\",\n    \"/components/TaskList.js\",\n    \"/components/TaskItem.js\"\n  ]\n}\n```" },
            ],
        },
    ],
});

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
